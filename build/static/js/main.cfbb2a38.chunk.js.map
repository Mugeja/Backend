{"version":3,"sources":["services/persons.js","index.js"],"names":["services_persons","console","log","axios","get","then","response","data","newObject","post","id","put","concat","delete","Rows","_ref","persons","filter","setServiceMessage","serviceMessage","person","name","toLowerCase","includes","map","react_default","a","createElement","key","number","onClick","deletePerson","_ref2","window","confirm","personService","Notification","setTimeout","PersonForm","props","onSubmit","addName","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","_ref3","handleFilterChange","_ref4","message","className","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","SetFilter","_useState9","_useState10","useEffect","initialPersons","src_Notification","src_Filter","event","target","src_PersonForm","preventDefault","nameObject","_ref5","forEach","returnedPerson","updatePerson","catch","error","src_Rows","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.cfbb2a38.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/persons'\r\n\r\nconst getAll = () => {\r\n  console.log(\"tässä ollaan\")\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return (request.then(response => response.data) )\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { getAll, create, update, deletePerson }\r\n","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport personService from './services/persons'\nimport './index.css'\nimport { log } from 'util';\n\nconst Rows = ({ persons, filter, setServiceMessage, serviceMessage }) => {\n    return (\n        persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()) === true).map(person =>\n            <li key={person.id}> {person.name} {person.number} <button onClick={() => deletePerson({ person, setServiceMessage, serviceMessage })} > poista </button> </li>)\n    )\n}\n\nconst deletePerson = ({ person, setServiceMessage, serviceMessage }) => {\n    if (window.confirm(`poistetaanko ${person.name}?`)) {\n        personService.deletePerson(person.id)\n\n        setServiceMessage(`Poistettiin ${person.name}`)\n        Notification({ serviceMessage })\n        setTimeout(() => {\n            setServiceMessage(null)\n        }, 5000)\n    }\n}\n\nconst PersonForm = (props) => {\n    return (\n        <form onSubmit={props.addName}>\n            <div>\n                nimi: <input value={props.newName}\n                    onChange={props.handleNameChange}\n                />\n            </div>\n            <div>\n                numero: <input value={props.newNumber}\n                    onChange={props.handleNumberChange}\n                />\n            </div>\n            <div>\n                <button type=\"submit\">lisää</button>\n            </div>\n        </form>\n    )\n\n}\nconst Filter = ({ filter, handleFilterChange }) => {\n    return (\n        <input\n            value={filter}\n            onChange={handleFilterChange}\n        />\n    )\n}\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"notification\">\n            {message}\n        </div>\n    )\n\n}\n\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filter, SetFilter] = useState('')\n    const [serviceMessage, setServiceMessage] = useState()\n\n    const updatePerson = ({ nameObject }) => {\n        var id = null\n        persons.forEach(person => {\n            if (nameObject.name.toLowerCase() === person.name.toLowerCase()) {\n                id = person.id\n            }\n        })\n        personService.update(id, nameObject)\n            .then(returnedPerson => {\n                setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n            })\n        setServiceMessage(`Päivitettiin ${nameObject.name}`)\n        Notification({ serviceMessage })\n        setTimeout(() => {\n            setServiceMessage(null)\n        }, 5000)\n    }\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(initialPersons => {\n                setPersons(initialPersons)\n            })\n    }, [])\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n    const handleFilterChange = (event) => {\n        SetFilter(event.target.value)\n    }\n\n    const addName = (event) => {\n        event.preventDefault()\n        const nameObject = {\n            name: newName,\n            number: newNumber,\n        }\n\n        if ((persons.map(person => person.name.toLowerCase())).includes(newName.toLowerCase())) {\n            if (window.confirm(`${newName} on jo luettelossa, korvataanko vanha numero uudella?`)) {\n                updatePerson({ nameObject })\n            }\n        }\n        else {\n            personService\n                .create(nameObject)\n                .then(returnedPerson => {\n                    setPersons(persons.concat(returnedPerson))\n                    setNewName('')\n                    setNewNumber('')\n                })\n                .catch(error => {\n                    setServiceMessage(error.response.data)\n                    Notification({serviceMessage})\n                    console.log(error.response.data)\n                })\n            setServiceMessage(`Lisättiin ${nameObject.name}`)\n            Notification({ serviceMessage })\n            setTimeout(() => {\n                setServiceMessage(null)\n            }, 5000)\n        }\n    }\n\n    return (\n        <div>\n\n            <h1>Puhelinluettelo</h1>\n            <Notification message={serviceMessage} />\n            <p>rajaa hakua</p>\n            <Filter filter={filter} handleFilterChange={handleFilterChange} />\n            <h2>Lisää uusi</h2>\n            <PersonForm addName={addName} newName={newName} newNumber={newNumber}\n                handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\n            <h2>Numerot</h2>\n            <Rows persons={persons} filter={filter} setServiceMessage={setServiceMessage} serviceMessage={serviceMessage} />\n\n        </div>\n    )\n\n}\n\nReactDOM.render(<App />,\n    document.getElementById('root')\n)\nexport default App"],"sourceRoot":""}